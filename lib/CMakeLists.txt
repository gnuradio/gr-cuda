# Copyright 2011,2012,2016,2018,2019 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-cuda
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

########################################################################
# Setup library
########################################################################
include(GrPlatform) #define LIB_SUFFIX
find_package(CUDA)

###############################################################################
# CUDA Dependency is required
###############################################################################
add_library(gnuradio-cuda-cu STATIC 
    cuda_error.cc
    multiply_const.cu
    load.cu
)
set_target_properties(gnuradio-cuda-cu PROPERTIES 
    POSITION_INDEPENDENT_CODE ON
    CUDA_VISIBILITY_PRESET "hidden"
    CUDA_SEPARABLE_COMPILATION ON
)
target_include_directories(gnuradio-cuda-cu
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
    ${CUDA_INCLUDE_DIRS} 
  )

list(APPEND cuda_sources
    cuda_buffer.cc
    copy_impl.cc
    multiply_const_impl.cc
    load_impl.cc
)

set(cuda_sources "${cuda_sources}" PARENT_SCOPE)
if(NOT cuda_sources)
    MESSAGE(STATUS "No C++ sources... skipping lib/")
    return()
endif(NOT cuda_sources)

add_library(gnuradio-cuda SHARED ${cuda_sources})
target_link_libraries(gnuradio-cuda PUBLIC
    gnuradio::gnuradio-runtime
    ${CUDA_CUDART_LIBRARY}  
    )
target_link_libraries(gnuradio-cuda PRIVATE gnuradio-cuda-cu)

target_include_directories(gnuradio-cuda
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
    ${CUDA_INCLUDE_DIRS} 
  )
set_target_properties(gnuradio-cuda PROPERTIES DEFINE_SYMBOL "gnuradio_cuda_EXPORTS")

if(APPLE)
    set_target_properties(gnuradio-cuda PROPERTIES
        INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib"
    )
endif(APPLE)

# Make a fat binary for supported architectures
if(${CMAKE_VERSION} VERSION_LESS "3.18") 
    # Compile for supported archs; CMake workaround, see: https://stackoverflow.com/a/54505975/73878
    target_compile_options(gnuradio-cuda-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_60,code=sm_60>")
    target_compile_options(gnuradio-cuda-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_61,code=sm_61>")
    target_compile_options(gnuradio-cuda-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_62,code=sm_62>")
    target_compile_options(gnuradio-cuda-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_70,code=sm_70>")
    target_compile_options(gnuradio-cuda-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_72,code=sm_72>")
    target_compile_options(gnuradio-cuda-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_75,code=sm_75>")
    # target_compile_options(gnuradio-myoot-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_80,code=sm_80>")
    # target_compile_options(gnuradio-myoot-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_86,code=sm_86>")
else()
    set_target_properties(gnuradio-cuda-cu PROPERTIES CUDA_ARCHITECTURES "60;61;62;70;72;75")
    set_target_properties(gnuradio-cuda PROPERTIES CUDA_ARCHITECTURES "60;61;62;70;72;75")
endif()

########################################################################
# Install built library files
########################################################################
include(GrMiscUtils)
GR_LIBRARY_FOO(gnuradio-cuda)

########################################################################
# Print summary
########################################################################
message(STATUS "Using install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Building for version: ${VERSION} / ${LIBVER}")

########################################################################
# Build and register unit test
########################################################################
include(GrTest)

# If your unit tests require special include paths, add them here
#include_directories()
# List all files that contain Boost.UTF unit tests here
list(APPEND test_cuda_sources
)
# Anything we need to link to for the unit tests go here
list(APPEND GR_TEST_TARGET_DEPS gnuradio-cuda)

if(NOT test_cuda_sources)
    MESSAGE(STATUS "No C++ unit tests... skipping")
    return()
endif(NOT test_cuda_sources)

foreach(qa_file ${test_cuda_sources})
    GR_ADD_CPP_TEST("cuda_${qa_file}"
        ${CMAKE_CURRENT_SOURCE_DIR}/${qa_file}
    )
endforeach(qa_file)
